/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hr.GUI;

import hr.dal.Repo;
import hr.dal.RepoFactory;
import hr.model.User;
import hr.model.UserAddable;
import hr.model.UserAuthenticable;
import hr.model.UserType;
import java.awt.event.ActionListener;
import java.util.List;
import java.util.Optional;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JMenuItem;
import javax.swing.KeyStroke;

/**
 *
 * @author User
 */
public class MainWindow extends javax.swing.JFrame implements UserAuthenticable, UserAddable {

    private static final String EDIT_MOVIES = "Edit movies";
    private static final String UPLOAD_MOVIES = "Upload movies";
    private static final String EDIT_PERSONS = "Edit persons";
    
    private Repo userRepository;
    private static MainWindow window;
    /**
     * Creates new form Main
     * @throws java.lang.Exception
     */
    public MainWindow() throws Exception {
        initComponents();
        initRepo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tpContent = new javax.swing.JTabbedPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuApplication = new javax.swing.JMenu();
        miExit = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        menuApplication.setText("Application");

        miExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        miExit.setText("Exit");
        miExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miExitActionPerformed(evt);
            }
        });
        menuApplication.add(miExit);

        jMenuBar1.add(menuApplication);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tpContent, javax.swing.GroupLayout.DEFAULT_SIZE, 1066, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 4, Short.MAX_VALUE)
                .addComponent(tpContent, javax.swing.GroupLayout.PREFERRED_SIZE, 749, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void miExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_miExitActionPerformed
      
    private void miChangePanelActionPerformed(java.awt.event.ActionEvent evt) {   
        JMenuItem item = (JMenuItem) evt.getSource();
        tpContent.setSelectedIndex(Integer.parseInt(item.getName())-1);
    }   
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    window = new MainWindow();
                    new AuthUserDialog(window, true).setVisible(true);
                } catch (Exception ex) {
                    Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                }   
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu menuApplication;
    private javax.swing.JMenuItem miExit;
    private javax.swing.JTabbedPane tpContent;
    // End of variables declaration//GEN-END:variables
    
    private void configurePanels(UserType type) {

        tpContent.add(EDIT_MOVIES, new EditMoviesPnl());
        tpContent.add(EDIT_PERSONS, new EditPersonsPnl());
        menuApplication.add(createMenuItem("Panel 1", "1",
                javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_1, java.awt.event.InputEvent.CTRL_MASK), 
                (java.awt.event.ActionEvent evt) -> {
                    miChangePanelActionPerformed(evt);
        }));
        menuApplication.add(createMenuItem("Panel 2", "2",
                javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_2, java.awt.event.InputEvent.CTRL_MASK), 
                (java.awt.event.ActionEvent evt) -> {
                    miChangePanelActionPerformed(evt);
        }));
        if(type.equals(UserType.ADMIN)) {
            tpContent.add(UPLOAD_MOVIES, new UploadMoviesPnl());
            menuApplication.add(createMenuItem("Panel 3", "3",
                javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_3, java.awt.event.InputEvent.CTRL_MASK), 
                (java.awt.event.ActionEvent evt) -> {
                    miChangePanelActionPerformed(evt);
            }));
        }
    }
    
    private JMenuItem createMenuItem(String text, String key, KeyStroke acc, ActionListener ac) {
        JMenuItem mi = new JMenuItem();
        mi.setAccelerator(acc);
        mi.setText(text);
        mi.addActionListener(ac);
        mi.setName(key);
        return mi;
    }

    @Override
    public boolean authenticateUser(User user) {
        try {
            List<User> allUsers = userRepository.select();
            Optional<User> found = allUsers.stream()
                    .filter(u -> u.getName().equals(user.getName()))
                    .findAny();
            
            if(found.isPresent() && found.get().getPassword().equals(user.getPassword())) {
                configurePanels(found.get().getType());
                window.setVisible(true);
                return true;
            }
        } catch (Exception ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
        return false;
    }
    
    @Override
    public boolean addUser(User user) {
        try {
            List<User> allUsers = userRepository.select();
            Optional<User> found = allUsers.stream()
                    .filter(u -> u.getName().equals(user.getName()))
                    .findAny();
            
            if(!found.isPresent()) {
                userRepository.create(user);
                return true;
            }
        } catch (Exception ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
        return false;
    }

    private void initRepo() throws Exception {
        userRepository = RepoFactory.getUserRepo();
    }
    
}
